 <Window x:Class="BeerServer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BeerServer"
        mc:Ignorable="d"
        ResizeMode="CanResizeWithGrip" 
        Title="Beer Server program loader" Height="580" Width="600" FontSize="14" FontFamily="MS UI Gothic"  Background="#fcfcfc" Foreground="#333333">

    <Window.Resources>
        <Style x:Key="FocusVisual">
            <!--キー入力によるフォーカス -->
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="#333333" StrokeThickness="2" StrokeDashArray="1 1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style  TargetType= "{x:Type CheckBox}">
            <!--チェックボックスコントールの外観と動作の設定-->
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid>
                            <!--チェックOFF時の長方形を定義-->
                            <Rectangle x:Name="CheckOFF" Width ="36" Height="36" Fill="#fcfcfc" Stroke="#333333" StrokeThickness="1"/>
                            <!--チェックON時の長方形を定義-->
                            <Rectangle x:Name="CheckON"  Width ="36" Height="36" Fill="Chartreuse" Stroke="#333333" StrokeThickness="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <!--チェックONの場合 -->
                                <Setter TargetName="CheckOFF" Property="Visibility" Value="Hidden" />
                                <!--チェックOFF時の長方形を隠す-->
                                <Setter TargetName="CheckON" Property="Visibility" Value="Visible" />
                                <!--チェックON時の長方形を表示-->

                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <!--チェックOFFの場合 -->
                                <Setter TargetName="CheckOFF" Property="Visibility" Value="Visible" />
                                <!--チェックOFF時の長方形を表示-->
                                <Setter TargetName="CheckON" Property="Visibility" Value="Hidden" />
                                <!--チェックON時の長方形を隠す-->
                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>




    <Grid Name="grid1" ShowGridLines="False">
        <Grid.Resources>
            <Style TargetType="Button">
                <Setter Property="Height" Value="30" />
                <Setter Property="Width" Value="85"/>
                <Setter Property="Margin" Value="10" />
                <Setter Property="BorderBrush" Value="#a6a6a6" />
                <Setter Property="Foreground" Value="#333333" />
                <Setter Property="Background" Value="#fcfcfc"/>
            </Style>
            <Style TargetType="DataGrid">
                <Setter Property="Background" Value="#fcfcfc" />
                <Setter Property="CanUserSortColumns" Value="False" />
                <Setter Property="CanUserReorderColumns" Value="False"/>
                <Setter Property="CanUserResizeRows" Value="False"/>
                <Setter Property="AutoGenerateColumns" Value="False"/>
                <Setter Property="Margin" Value="0" />
                <Setter Property="Grid.RowSpan" Value="1" />
                <Setter Property="Grid.ColumnSpan" Value="1" />

            </Style>
            <Style TargetType="DataGridColumnHeader">
                <Setter Property="Background" Value="#fcfcfc" />
                <Setter Property="Foreground" Value="#333333"/>
                <Setter Property="BorderBrush" Value="DimGray"/>
                <Setter Property="BorderThickness" Value="0.5"/>
            </Style>
            <Style TargetType="DataGridRow">
                <Setter Property="Background" Value="#fcfcfc" />
                <Setter Property="Foreground" Value="#333333" />
                <Setter Property="BorderBrush" Value="DimGray"/>
                <Setter Property="BorderThickness" Value="0.2"/>
            </Style>

        </Grid.Resources>
        
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.7*" MinWidth="100"/>
            <ColumnDefinition Width="AUTO"/>
            <ColumnDefinition Width="0.3*" MinWidth="100" />
        </Grid.ColumnDefinitions>

        <!-- Grid 行方向の大きさ指定 "AUTO"は、高さを変更する GridSplitterの部分-->
        <Grid.RowDefinitions>
            <RowDefinition Height="2*"  MinHeight="100" />
            <RowDefinition Height="AUTO"  />
            <RowDefinition Height="1*" MinHeight="100" />
        </Grid.RowDefinitions>


        <!--横幅を変更する GridSplitter-->
        <GridSplitter Grid.Row="0" Grid.Column="1"   Grid.RowSpan="3" Width="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Gainsboro"/>

        <!--高さを変更する GridSplitter-->
        <GridSplitter Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="5" Height="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Gainsboro"/>

        <DataGrid x:Name="SwStatus_DataGrid"  Grid.Row="0" Grid.Column="0" Grid.RowSpan="1"  ItemsSource="{Binding}"  
                  GridLinesVisibility="None" CanUserSortColumns="False" CanUserReorderColumns="False" CanUserResizeRows="False" 
                  CanUserResizeColumns="False" AutoGenerateColumns="True" DataGrid.CanUserAddRows="False" 
                  AutoGeneratingColumn="SwStatus_DataGrid_AutoGeneratingColumn" EnableRowVirtualization="False" SelectionUnit="Cell"  SelectionMode="Single"
                  HeadersVisibility="Column"  RowHeight="24" Margin="10,10,10,10" >

            <DataGrid.Resources>
                <DataTemplate x:Key="time">
                    <Label Content="{Binding time}"/>
                </DataTemplate>
                <DataTemplate x:Key="sw3">
                    <CheckBox IsChecked="{Binding sw3, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Checked="CheckBox_Checked" Unchecked="CheckBox_Checked" 
                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </DataTemplate>

                <DataTemplate x:Key="sw4">
                    <CheckBox IsChecked="{Binding sw4, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Checked="CheckBox_Checked" Unchecked="CheckBox_Checked"
                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </DataTemplate>

            </DataGrid.Resources>

            <DataGrid.Background>
                <SolidColorBrush Color="#fcfcfc"/>
            </DataGrid.Background>


            <DataGrid.ColumnHeaderStyle>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="#fcfcfc"/>
                    <Setter Property="Foreground" Value="#333333"/>
                    <Setter Property="BorderBrush" Value="DimGray"/>
                    <Setter Property="BorderThickness" Value="0.1"/>
                    <Setter Property="Width" Value="30" />
                </Style>
            </DataGrid.ColumnHeaderStyle>


            <DataGrid.CellStyle>
                <Style TargetType="DataGridCell">
                    <Setter Property="Background" Value="#fcfcfc" />
                    <Setter Property="Foreground" Value="#333333" />
                    <Setter Property="BorderBrush" Value="Gainsboro"/>
                    <Setter Property="BorderThickness" Value="1.0"/>
                </Style>
            </DataGrid.CellStyle>


            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Setter Property="Background" Value="#fcfcfc" />
                    <Setter Property="Foreground" Value="#333333" />
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.RowHeaderStyle>
                <Style TargetType="DataGridRowHeader">
                    <Setter Property="Background" Value= "#fcfcfc" />
                    <Setter Property="Foreground" Value="#333333" />
                    <Setter Property="Width" Value="26" />
                </Style>
            </DataGrid.RowHeaderStyle>

        </DataGrid>


        <DataGrid x:Name="FnTime_DataGrid" Grid.Row ="0" Grid.Column="2" Visibility="Visible" IsReadOnly="True">
            <DataGrid.Columns >
                <DataGridTextColumn Header="動作" Width="80" IsReadOnly="True" Binding = "{Binding fn }" >
                    <DataGridTextColumn.CellStyle>
                        <!-- ここで IsErr が True のときだけ背景色を設定している -->
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsErr}" Value="True">
                                    <Setter Property="Background" Value="OrangeRed" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                
                <DataGridTextColumn Header="時間[sec]" Width="60" IsReadOnly="True" Binding = "{Binding time }" />
                
            </DataGrid.Columns>
        </DataGrid>

        <StackPanel Orientation="Vertical"  Grid.Row="2" Grid.Column="0">
            <StackPanel Orientation="Horizontal"  Margin="10,10,0,0">
                <Label Content="Program:" Margin="0,10,0,10"/>
                <Button Content="Download"   Click="Download_Button_Click" />
                <Button Content="From RL78"   Click="Upload_Button_Click" />
                <Button Content="Clear" Click="Clear_Button_Click" />
            </StackPanel>
            <StackPanel Orientation="Horizontal"  Margin="10,0,0,0">
                <Label Content="Disk:" Margin="26,10,0,10"/>
                <Button Content="Save"   Click="Save_Button_Click" />
                <Button Content="Load"   Click="Load_Button_Click" />
            </StackPanel>


            <StackPanel Orientation="Horizontal" Margin="10,0,0,0">
                <Label Content="Setting:  " Margin="0,10,0,10"/>
                <Button Content="Serial Port"   Click="Serial_Button_Click"/>
                <Button x:Name="CommLog_Button"  Content="Message" Click="Comm_Log_Button_Click" />
            </StackPanel>
            
            <StackPanel Orientation="Horizontal" Margin="4,0,0,0">
                <TextBlock x:Name="StatusTextBlock" Text="Comm status" Margin="250,0,0,0"/>
            </StackPanel>
        </StackPanel>
        
        <ScrollViewer x:Name ="BitMapPackDataScroll"  Grid.Row="2" Grid.Column="2"  HorizontalAlignment="Left" VerticalAlignment="Top"  VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
            <TextBlock x:Name="tB_BitMapPackData" HorizontalAlignment="Left" VerticalAlignment="Top"  TextWrapping="NoWrap"  Text="SW_data" />
        </ScrollViewer>

    </Grid>
</Window>
